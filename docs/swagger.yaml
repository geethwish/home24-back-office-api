openapi: 3.0.0
info:
  title: Product Management Back Office API
  version: 1.0.0
  description: API for managing product categories and products
servers:
  - url: http://localhost:3001/api/v1/
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []

paths:
  # Authentication APIs
  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - email
                - password
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "401":
          description: Invalid email or password
        "500":
          description: Server error

  /auth/signup:
    post:
      summary: User signup
      description: Registers a new user and returns a JWT token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - name
                - email
                - password
      responses:
        "201":
          description: Successful signup
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "400":
          description: User already exists
        "500":
          description: Server error

  # Category APIs
  /categories:
    get:
      summary: Get all categories
      description: Retrieve a list of all categories.
      tags:
        - Category
      responses:
        "200":
          description: A list of categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "500":
          description: Server error
    post:
      summary: Create a new category
      description: Add a new category to the system.
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInput"
      responses:
        "201":
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "500":
          description: Server error

  /categories/{id}:
    get:
      summary: Get a category by ID
      description: Retrieve a specific category by its ID.
      tags:
        - Category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the category to retrieve.
      responses:
        "200":
          description: The requested category.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
        "500":
          description: Server error
    put:
      summary: Update a category
      description: Update the details of an existing category.
      tags:
        - Category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the category to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInput"
      responses:
        "201":
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
        "500":
          description: Server error
    delete:
      summary: Delete a category
      description: Remove a category from the system.
      tags:
        - Category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the category to delete.
      responses:
        "200":
          description: Category deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Category deleted
        "404":
          description: Category not found
        "500":
          description: Server error

  # Product APIs
  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all products.
      tags:
        - Product
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          required: false
          description: Number of products per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          required: false
          description: Field to sort by
          schema:
            type: string
            default: id
        - name: sortOrder
          in: query
          required: false
          description: Sort order (asc or desc)
          schema:
            type: string
            default: asc
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  pageSize:
                    type: integer
        "500":
          description: Server error
    post:
      summary: Create a new product
      description: Add a new product to the system.
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product created successfully
        "500":
          description: Server error
  /categories/{categoryId}:
    get:
      summary: Get products by category
      description: Retrieve a list of products filtered by a specific category.
      tags:
        - Product
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the category to filter products by.
          schema:
            type: string
      responses:
        "200":
          description: List of products in the specified category.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "404":
          description: Category not found.
        "500":
          description: Server error.

  /products/{productId}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
        "500":
          description: Server error
    put:
      summary: Update product by ID
      description: Update the details of an existing product.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product updated successfully
        "404":
          description: Product not found
        "500":
          description: Server error
    delete:
      summary: Delete product by ID
      description: Remove a product from the system.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to delete
          schema:
            type: string
      responses:
        "200":
          description: Product deleted successfully
        "404":
          description: Product not found
        "500":
          description: Server error
